#!/bin/bash

# Check if template exists
if [[ ! -f $BASHGPT_PREFIX/bash-gpt/templates/$BASHGPT_MODEL ]]
then
    echo "ERROR: template $BASHGPT_MODEL not found in $BASHGPT_PREFIX/bash-gpt/templates"
    return
fi

OUTPUT=""
COMMAND=""

# Escape quotes
READLINE_LINE=$(echo $READLINE_LINE | sed -E 's/"/\\"/g')

# Perform prompt substitution
BASHGPT_PROMPT="${BASHGPT_TEMPLATE//\{\{TEXT\}\}/$READLINE_LINE}"

# Load template
. $BASHGPT_PREFIX/bash-gpt/templates/$BASHGPT_MODEL

redraw_current_line() {
    local current_line="$READLINE_LINE"
    local current_point="$READLINE_POINT"

    READLINE_LINE=$COMMAND
    READLINE_POINT=${#READLINE_LINE}
}

parse_code() {
    # Extract JSON content, assuming 'content' is directly under a 'message' object
    OUTPUT=$(echo $JSON | grep -Po '"content":\s*"\K[^"]*(?=")')
    OUTPUT=$(echo $OUTPUT | sed -e 's/\\n/\n/g' -e 's/\\"/"/g')

    # Extract command between triple backticks
    if [[ $OUTPUT == *"\`\`\`"* ]]; then
        COMMAND=$(echo "$OUTPUT" | awk '/^```bash$/,/^```$/ { if (!/```/) print }')
    fi
}

get_command() {
    JSON=$(curl -s $BASHGPT_ENDPOINT \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $BASHGPT_OPENAI_KEY" \
      -d "$BASHGPT_DATA")
    parse_code
}

get_command

if [[ -z "$COMMAND" ]]
then
    if [[ -z "$OUTPUT" || "$OUTPUT" == "null" ]]
    then
        if [[ -z "$JSON" ]]
        then
            echo "ERROR: received no response from API"
        else
            echo "ERROR:"
            echo $JSON
        fi
    else
        echo -e "ERROR: $OUTPUT"
    fi
else
    redraw_current_line
fi
